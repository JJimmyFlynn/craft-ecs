name: Build and Push Container Image
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - app/**/*
      - Dockerfile
permissions:
  id-token: write
  contents: read
env:
  AWS_EXECUTION_ROLE: ${{secrets.AWS_EXECUTION_ROLE}}
  ECR_REGISTRY_URL: ${{secrets.ECR_REPOSITORY_URL}}
  ECR_IMAGE_NAME: ${{secrets.ECR_IMAGE_NAME}}
jobs:
  BuildImage:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{env.AWS_EXECUTION_ROLE}}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{env.ECR_REGISTRY_URL}}/${{env.ECR_IMAGE_NAME}}
      - name: Build, tag, and push docker image to Amazon ECR
        uses: docker/build-push-action@v4
        env:
          IMAGE_TAG: ${{ github.sha }}
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: |
            ${{env.ECR_REGISTRY_URL}}/${{env.ECR_IMAGE_NAME}}:${{env.IMAGE_TAG}}
            ${{env.ECR_REGISTRY_URL}}/${{env.ECR_IMAGE_NAME}}:latest
      - name: Set ECS Security Group ID Variable
        run: echo "ecs_sg_id=$(aws ec2 describe-security-groups --filters Name=group-name,Values=ecs-service-sg --query 'SecurityGroups[*].{ID:GroupId}' --output text)" >> "$GITHUB_ENV"
      - name: Set ECS Subnet IDs Variable
        run: echo "ecs_subnet_ids=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=Craft Private 1" --query 'Subnets[*].SubnetId' --output text)" >> "$GITHUB_ENV"
      - name: Launch Init Task
        run: | 
          aws ecs run-task \
          --cluster Craft_ECS \
          --task-definition craft_init \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ env.ecs_subnet_ids }}],securityGroups=[${{ env.ecs_sg_id }}]}"
      - name: Start ECS Deployment
        run: aws ecs update-service --cluster Craft_ECS --service craft_web --force-new-deployment


